// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_data_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_data_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_data_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_data_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_data_2eproto;
class Enum;
struct EnumDefaultTypeInternal;
extern EnumDefaultTypeInternal _Enum_default_instance_;
class Father;
struct FatherDefaultTypeInternal;
extern FatherDefaultTypeInternal _Father_default_instance_;
class Father_Daughter;
struct Father_DaughterDefaultTypeInternal;
extern Father_DaughterDefaultTypeInternal _Father_Daughter_default_instance_;
class Mas;
struct MasDefaultTypeInternal;
extern MasDefaultTypeInternal _Mas_default_instance_;
class Types;
struct TypesDefaultTypeInternal;
extern TypesDefaultTypeInternal _Types_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Enum* Arena::CreateMaybeMessage<::Enum>(Arena*);
template<> ::Father* Arena::CreateMaybeMessage<::Father>(Arena*);
template<> ::Father_Daughter* Arena::CreateMaybeMessage<::Father_Daughter>(Arena*);
template<> ::Mas* Arena::CreateMaybeMessage<::Mas>(Arena*);
template<> ::Types* Arena::CreateMaybeMessage<::Types>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum Enum_Status : int {
  Enum_Status_FIRST = 0,
  Enum_Status_SECOND = 1,
  Enum_Status_THIRD = 2,
  Enum_Status_Enum_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Enum_Status_Enum_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Enum_Status_IsValid(int value);
constexpr Enum_Status Enum_Status_Status_MIN = Enum_Status_FIRST;
constexpr Enum_Status Enum_Status_Status_MAX = Enum_Status_THIRD;
constexpr int Enum_Status_Status_ARRAYSIZE = Enum_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Enum_Status_descriptor();
template<typename T>
inline const std::string& Enum_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Enum_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Enum_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Enum_Status_descriptor(), enum_t_value);
}
inline bool Enum_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Enum_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Enum_Status>(
    Enum_Status_descriptor(), name, value);
}
// ===================================================================

class Types final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Types) */ {
 public:
  inline Types() : Types(nullptr) {}
  ~Types() override;
  explicit PROTOBUF_CONSTEXPR Types(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Types(const Types& from);
  Types(Types&& from) noexcept
    : Types() {
    *this = ::std::move(from);
  }

  inline Types& operator=(const Types& from) {
    CopyFrom(from);
    return *this;
  }
  inline Types& operator=(Types&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Types& default_instance() {
    return *internal_default_instance();
  }
  static inline const Types* internal_default_instance() {
    return reinterpret_cast<const Types*>(
               &_Types_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Types& a, Types& b) {
    a.Swap(&b);
  }
  inline void Swap(Types* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Types* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Types* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Types>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Types& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Types& from) {
    Types::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Types* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Types";
  }
  protected:
  explicit Types(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringFieldNumber = 14,
    kBytesFieldNumber = 15,
    kDoubleFieldNumber = 1,
    kFloatFieldNumber = 2,
    kInt32FieldNumber = 3,
    kInt64FieldNumber = 4,
    kUint64FieldNumber = 6,
    kUint32FieldNumber = 5,
    kSint32FieldNumber = 7,
    kSint64FieldNumber = 8,
    kFixed64FieldNumber = 10,
    kFixed32FieldNumber = 9,
    kSfixed32FieldNumber = 11,
    kSfixed64FieldNumber = 12,
    kBoolFieldNumber = 13,
  };
  // string string = 14;
  void clear_string();
  const std::string& string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string();
  PROTOBUF_NODISCARD std::string* release_string();
  void set_allocated_string(std::string* string);
  private:
  const std::string& _internal_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string(const std::string& value);
  std::string* _internal_mutable_string();
  public:

  // bytes bytes = 15;
  void clear_bytes();
  const std::string& bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bytes();
  PROTOBUF_NODISCARD std::string* release_bytes();
  void set_allocated_bytes(std::string* bytes);
  private:
  const std::string& _internal_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bytes(const std::string& value);
  std::string* _internal_mutable_bytes();
  public:

  // double double = 1;
  void clear_double_();
  double double_() const;
  void set_double_(double value);
  private:
  double _internal_double_() const;
  void _internal_set_double_(double value);
  public:

  // float float = 2;
  void clear_float_();
  float float_() const;
  void set_float_(float value);
  private:
  float _internal_float_() const;
  void _internal_set_float_(float value);
  public:

  // int32 int32 = 3;
  void clear_int32();
  int32_t int32() const;
  void set_int32(int32_t value);
  private:
  int32_t _internal_int32() const;
  void _internal_set_int32(int32_t value);
  public:

  // int64 int64 = 4;
  void clear_int64();
  int64_t int64() const;
  void set_int64(int64_t value);
  private:
  int64_t _internal_int64() const;
  void _internal_set_int64(int64_t value);
  public:

  // uint64 uint64 = 6;
  void clear_uint64();
  uint64_t uint64() const;
  void set_uint64(uint64_t value);
  private:
  uint64_t _internal_uint64() const;
  void _internal_set_uint64(uint64_t value);
  public:

  // uint32 uint32 = 5;
  void clear_uint32();
  uint32_t uint32() const;
  void set_uint32(uint32_t value);
  private:
  uint32_t _internal_uint32() const;
  void _internal_set_uint32(uint32_t value);
  public:

  // sint32 sint32 = 7;
  void clear_sint32();
  int32_t sint32() const;
  void set_sint32(int32_t value);
  private:
  int32_t _internal_sint32() const;
  void _internal_set_sint32(int32_t value);
  public:

  // sint64 sint64 = 8;
  void clear_sint64();
  int64_t sint64() const;
  void set_sint64(int64_t value);
  private:
  int64_t _internal_sint64() const;
  void _internal_set_sint64(int64_t value);
  public:

  // fixed64 fixed64 = 10;
  void clear_fixed64();
  uint64_t fixed64() const;
  void set_fixed64(uint64_t value);
  private:
  uint64_t _internal_fixed64() const;
  void _internal_set_fixed64(uint64_t value);
  public:

  // fixed32 fixed32 = 9;
  void clear_fixed32();
  uint32_t fixed32() const;
  void set_fixed32(uint32_t value);
  private:
  uint32_t _internal_fixed32() const;
  void _internal_set_fixed32(uint32_t value);
  public:

  // sfixed32 sfixed32 = 11;
  void clear_sfixed32();
  int32_t sfixed32() const;
  void set_sfixed32(int32_t value);
  private:
  int32_t _internal_sfixed32() const;
  void _internal_set_sfixed32(int32_t value);
  public:

  // sfixed64 sfixed64 = 12;
  void clear_sfixed64();
  int64_t sfixed64() const;
  void set_sfixed64(int64_t value);
  private:
  int64_t _internal_sfixed64() const;
  void _internal_set_sfixed64(int64_t value);
  public:

  // bool bool = 13;
  void clear_bool_();
  bool bool_() const;
  void set_bool_(bool value);
  private:
  bool _internal_bool_() const;
  void _internal_set_bool_(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Types)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_;
    double double__;
    float float__;
    int32_t int32_;
    int64_t int64_;
    uint64_t uint64_;
    uint32_t uint32_;
    int32_t sint32_;
    int64_t sint64_;
    uint64_t fixed64_;
    uint32_t fixed32_;
    int32_t sfixed32_;
    int64_t sfixed64_;
    bool bool__;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class Mas final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Mas) */ {
 public:
  inline Mas() : Mas(nullptr) {}
  ~Mas() override;
  explicit PROTOBUF_CONSTEXPR Mas(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Mas(const Mas& from);
  Mas(Mas&& from) noexcept
    : Mas() {
    *this = ::std::move(from);
  }

  inline Mas& operator=(const Mas& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mas& operator=(Mas&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Mas& default_instance() {
    return *internal_default_instance();
  }
  static inline const Mas* internal_default_instance() {
    return reinterpret_cast<const Mas*>(
               &_Mas_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Mas& a, Mas& b) {
    a.Swap(&b);
  }
  inline void Swap(Mas* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mas* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Mas* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Mas>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Mas& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Mas& from) {
    Mas::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mas* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Mas";
  }
  protected:
  explicit Mas(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDoubleFieldNumber = 1,
    kFloatFieldNumber = 2,
    kInt32FieldNumber = 3,
    kInt64FieldNumber = 4,
    kUint32FieldNumber = 5,
    kUint64FieldNumber = 6,
    kSint32FieldNumber = 7,
    kSint64FieldNumber = 8,
    kFixed32FieldNumber = 9,
    kFixed64FieldNumber = 10,
    kSfixed32FieldNumber = 11,
    kSfixed64FieldNumber = 12,
    kBoolFieldNumber = 13,
    kStringFieldNumber = 14,
    kBytesFieldNumber = 15,
  };
  // repeated double double = 1;
  int double__size() const;
  private:
  int _internal_double__size() const;
  public:
  void clear_double_();
  private:
  double _internal_double_(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_double_() const;
  void _internal_add_double_(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_double_();
  public:
  double double_(int index) const;
  void set_double_(int index, double value);
  void add_double_(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      double_() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_double_();

  // repeated float float = 2;
  int float__size() const;
  private:
  int _internal_float__size() const;
  public:
  void clear_float_();
  private:
  float _internal_float_(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_float_() const;
  void _internal_add_float_(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_float_();
  public:
  float float_(int index) const;
  void set_float_(int index, float value);
  void add_float_(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      float_() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_float_();

  // repeated int32 int32 = 3;
  int int32_size() const;
  private:
  int _internal_int32_size() const;
  public:
  void clear_int32();
  private:
  int32_t _internal_int32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_int32() const;
  void _internal_add_int32(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_int32();
  public:
  int32_t int32(int index) const;
  void set_int32(int index, int32_t value);
  void add_int32(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      int32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_int32();

  // repeated int64 int64 = 4;
  int int64_size() const;
  private:
  int _internal_int64_size() const;
  public:
  void clear_int64();
  private:
  int64_t _internal_int64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_int64() const;
  void _internal_add_int64(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_int64();
  public:
  int64_t int64(int index) const;
  void set_int64(int index, int64_t value);
  void add_int64(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      int64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_int64();

  // repeated uint32 uint32 = 5;
  int uint32_size() const;
  private:
  int _internal_uint32_size() const;
  public:
  void clear_uint32();
  private:
  uint32_t _internal_uint32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_uint32() const;
  void _internal_add_uint32(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_uint32();
  public:
  uint32_t uint32(int index) const;
  void set_uint32(int index, uint32_t value);
  void add_uint32(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      uint32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_uint32();

  // repeated uint64 uint64 = 6;
  int uint64_size() const;
  private:
  int _internal_uint64_size() const;
  public:
  void clear_uint64();
  private:
  uint64_t _internal_uint64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_uint64() const;
  void _internal_add_uint64(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_uint64();
  public:
  uint64_t uint64(int index) const;
  void set_uint64(int index, uint64_t value);
  void add_uint64(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      uint64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_uint64();

  // repeated sint32 sint32 = 7;
  int sint32_size() const;
  private:
  int _internal_sint32_size() const;
  public:
  void clear_sint32();
  private:
  int32_t _internal_sint32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_sint32() const;
  void _internal_add_sint32(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_sint32();
  public:
  int32_t sint32(int index) const;
  void set_sint32(int index, int32_t value);
  void add_sint32(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      sint32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_sint32();

  // repeated sint64 sint64 = 8;
  int sint64_size() const;
  private:
  int _internal_sint64_size() const;
  public:
  void clear_sint64();
  private:
  int64_t _internal_sint64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_sint64() const;
  void _internal_add_sint64(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_sint64();
  public:
  int64_t sint64(int index) const;
  void set_sint64(int index, int64_t value);
  void add_sint64(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      sint64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_sint64();

  // repeated fixed32 fixed32 = 9;
  int fixed32_size() const;
  private:
  int _internal_fixed32_size() const;
  public:
  void clear_fixed32();
  private:
  uint32_t _internal_fixed32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_fixed32() const;
  void _internal_add_fixed32(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_fixed32();
  public:
  uint32_t fixed32(int index) const;
  void set_fixed32(int index, uint32_t value);
  void add_fixed32(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      fixed32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_fixed32();

  // repeated fixed64 fixed64 = 10;
  int fixed64_size() const;
  private:
  int _internal_fixed64_size() const;
  public:
  void clear_fixed64();
  private:
  uint64_t _internal_fixed64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_fixed64() const;
  void _internal_add_fixed64(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_fixed64();
  public:
  uint64_t fixed64(int index) const;
  void set_fixed64(int index, uint64_t value);
  void add_fixed64(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      fixed64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_fixed64();

  // repeated sfixed32 sfixed32 = 11;
  int sfixed32_size() const;
  private:
  int _internal_sfixed32_size() const;
  public:
  void clear_sfixed32();
  private:
  int32_t _internal_sfixed32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_sfixed32() const;
  void _internal_add_sfixed32(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_sfixed32();
  public:
  int32_t sfixed32(int index) const;
  void set_sfixed32(int index, int32_t value);
  void add_sfixed32(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      sfixed32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_sfixed32();

  // repeated sfixed64 sfixed64 = 12;
  int sfixed64_size() const;
  private:
  int _internal_sfixed64_size() const;
  public:
  void clear_sfixed64();
  private:
  int64_t _internal_sfixed64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_sfixed64() const;
  void _internal_add_sfixed64(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_sfixed64();
  public:
  int64_t sfixed64(int index) const;
  void set_sfixed64(int index, int64_t value);
  void add_sfixed64(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      sfixed64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_sfixed64();

  // repeated bool bool = 13;
  int bool__size() const;
  private:
  int _internal_bool__size() const;
  public:
  void clear_bool_();
  private:
  bool _internal_bool_(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_bool_() const;
  void _internal_add_bool_(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_bool_();
  public:
  bool bool_(int index) const;
  void set_bool_(int index, bool value);
  void add_bool_(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      bool_() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_bool_();

  // repeated string string = 14;
  int string_size() const;
  private:
  int _internal_string_size() const;
  public:
  void clear_string();
  const std::string& string(int index) const;
  std::string* mutable_string(int index);
  void set_string(int index, const std::string& value);
  void set_string(int index, std::string&& value);
  void set_string(int index, const char* value);
  void set_string(int index, const char* value, size_t size);
  std::string* add_string();
  void add_string(const std::string& value);
  void add_string(std::string&& value);
  void add_string(const char* value);
  void add_string(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& string() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_string();
  private:
  const std::string& _internal_string(int index) const;
  std::string* _internal_add_string();
  public:

  // repeated bytes bytes = 15;
  int bytes_size() const;
  private:
  int _internal_bytes_size() const;
  public:
  void clear_bytes();
  const std::string& bytes(int index) const;
  std::string* mutable_bytes(int index);
  void set_bytes(int index, const std::string& value);
  void set_bytes(int index, std::string&& value);
  void set_bytes(int index, const char* value);
  void set_bytes(int index, const void* value, size_t size);
  std::string* add_bytes();
  void add_bytes(const std::string& value);
  void add_bytes(std::string&& value);
  void add_bytes(const char* value);
  void add_bytes(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& bytes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_bytes();
  private:
  const std::string& _internal_bytes(int index) const;
  std::string* _internal_add_bytes();
  public:

  // @@protoc_insertion_point(class_scope:Mas)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > double__;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > float__;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > int32_;
    mutable std::atomic<int> _int32_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > int64_;
    mutable std::atomic<int> _int64_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > uint32_;
    mutable std::atomic<int> _uint32_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > uint64_;
    mutable std::atomic<int> _uint64_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > sint32_;
    mutable std::atomic<int> _sint32_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > sint64_;
    mutable std::atomic<int> _sint64_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > fixed32_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > fixed64_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > sfixed32_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > sfixed64_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > bool__;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> string_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> bytes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class Enum final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Enum) */ {
 public:
  inline Enum() : Enum(nullptr) {}
  ~Enum() override;
  explicit PROTOBUF_CONSTEXPR Enum(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Enum(const Enum& from);
  Enum(Enum&& from) noexcept
    : Enum() {
    *this = ::std::move(from);
  }

  inline Enum& operator=(const Enum& from) {
    CopyFrom(from);
    return *this;
  }
  inline Enum& operator=(Enum&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Enum& default_instance() {
    return *internal_default_instance();
  }
  static inline const Enum* internal_default_instance() {
    return reinterpret_cast<const Enum*>(
               &_Enum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Enum& a, Enum& b) {
    a.Swap(&b);
  }
  inline void Swap(Enum* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Enum* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Enum* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Enum>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Enum& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Enum& from) {
    Enum::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Enum* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Enum";
  }
  protected:
  explicit Enum(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Enum_Status Status;
  static constexpr Status FIRST =
    Enum_Status_FIRST;
  static constexpr Status SECOND =
    Enum_Status_SECOND;
  static constexpr Status THIRD =
    Enum_Status_THIRD;
  static inline bool Status_IsValid(int value) {
    return Enum_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    Enum_Status_Status_MIN;
  static constexpr Status Status_MAX =
    Enum_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    Enum_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return Enum_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return Enum_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return Enum_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .Enum.Status status = 1;
  void clear_status();
  ::Enum_Status status() const;
  void set_status(::Enum_Status value);
  private:
  ::Enum_Status _internal_status() const;
  void _internal_set_status(::Enum_Status value);
  public:

  // @@protoc_insertion_point(class_scope:Enum)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class Father_Daughter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Father.Daughter) */ {
 public:
  inline Father_Daughter() : Father_Daughter(nullptr) {}
  ~Father_Daughter() override;
  explicit PROTOBUF_CONSTEXPR Father_Daughter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Father_Daughter(const Father_Daughter& from);
  Father_Daughter(Father_Daughter&& from) noexcept
    : Father_Daughter() {
    *this = ::std::move(from);
  }

  inline Father_Daughter& operator=(const Father_Daughter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Father_Daughter& operator=(Father_Daughter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Father_Daughter& default_instance() {
    return *internal_default_instance();
  }
  static inline const Father_Daughter* internal_default_instance() {
    return reinterpret_cast<const Father_Daughter*>(
               &_Father_Daughter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Father_Daughter& a, Father_Daughter& b) {
    a.Swap(&b);
  }
  inline void Swap(Father_Daughter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Father_Daughter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Father_Daughter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Father_Daughter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Father_Daughter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Father_Daughter& from) {
    Father_Daughter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Father_Daughter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Father.Daughter";
  }
  protected:
  explicit Father_Daughter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:Father.Daughter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class Father final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Father) */ {
 public:
  inline Father() : Father(nullptr) {}
  ~Father() override;
  explicit PROTOBUF_CONSTEXPR Father(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Father(const Father& from);
  Father(Father&& from) noexcept
    : Father() {
    *this = ::std::move(from);
  }

  inline Father& operator=(const Father& from) {
    CopyFrom(from);
    return *this;
  }
  inline Father& operator=(Father&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Father& default_instance() {
    return *internal_default_instance();
  }
  static inline const Father* internal_default_instance() {
    return reinterpret_cast<const Father*>(
               &_Father_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Father& a, Father& b) {
    a.Swap(&b);
  }
  inline void Swap(Father* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Father* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Father* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Father>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Father& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Father& from) {
    Father::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Father* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Father";
  }
  protected:
  explicit Father(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Father_Daughter Daughter;

  // accessors -------------------------------------------------------

  enum : int {
    kDaughterFieldNumber = 1,
  };
  // repeated .Father.Daughter daughter = 1;
  int daughter_size() const;
  private:
  int _internal_daughter_size() const;
  public:
  void clear_daughter();
  ::Father_Daughter* mutable_daughter(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Father_Daughter >*
      mutable_daughter();
  private:
  const ::Father_Daughter& _internal_daughter(int index) const;
  ::Father_Daughter* _internal_add_daughter();
  public:
  const ::Father_Daughter& daughter(int index) const;
  ::Father_Daughter* add_daughter();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Father_Daughter >&
      daughter() const;

  // @@protoc_insertion_point(class_scope:Father)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Father_Daughter > daughter_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_data_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Types

// double double = 1;
inline void Types::clear_double_() {
  _impl_.double__ = 0;
}
inline double Types::_internal_double_() const {
  return _impl_.double__;
}
inline double Types::double_() const {
  // @@protoc_insertion_point(field_get:Types.double)
  return _internal_double_();
}
inline void Types::_internal_set_double_(double value) {
  
  _impl_.double__ = value;
}
inline void Types::set_double_(double value) {
  _internal_set_double_(value);
  // @@protoc_insertion_point(field_set:Types.double)
}

// float float = 2;
inline void Types::clear_float_() {
  _impl_.float__ = 0;
}
inline float Types::_internal_float_() const {
  return _impl_.float__;
}
inline float Types::float_() const {
  // @@protoc_insertion_point(field_get:Types.float)
  return _internal_float_();
}
inline void Types::_internal_set_float_(float value) {
  
  _impl_.float__ = value;
}
inline void Types::set_float_(float value) {
  _internal_set_float_(value);
  // @@protoc_insertion_point(field_set:Types.float)
}

// int32 int32 = 3;
inline void Types::clear_int32() {
  _impl_.int32_ = 0;
}
inline int32_t Types::_internal_int32() const {
  return _impl_.int32_;
}
inline int32_t Types::int32() const {
  // @@protoc_insertion_point(field_get:Types.int32)
  return _internal_int32();
}
inline void Types::_internal_set_int32(int32_t value) {
  
  _impl_.int32_ = value;
}
inline void Types::set_int32(int32_t value) {
  _internal_set_int32(value);
  // @@protoc_insertion_point(field_set:Types.int32)
}

// int64 int64 = 4;
inline void Types::clear_int64() {
  _impl_.int64_ = int64_t{0};
}
inline int64_t Types::_internal_int64() const {
  return _impl_.int64_;
}
inline int64_t Types::int64() const {
  // @@protoc_insertion_point(field_get:Types.int64)
  return _internal_int64();
}
inline void Types::_internal_set_int64(int64_t value) {
  
  _impl_.int64_ = value;
}
inline void Types::set_int64(int64_t value) {
  _internal_set_int64(value);
  // @@protoc_insertion_point(field_set:Types.int64)
}

// uint32 uint32 = 5;
inline void Types::clear_uint32() {
  _impl_.uint32_ = 0u;
}
inline uint32_t Types::_internal_uint32() const {
  return _impl_.uint32_;
}
inline uint32_t Types::uint32() const {
  // @@protoc_insertion_point(field_get:Types.uint32)
  return _internal_uint32();
}
inline void Types::_internal_set_uint32(uint32_t value) {
  
  _impl_.uint32_ = value;
}
inline void Types::set_uint32(uint32_t value) {
  _internal_set_uint32(value);
  // @@protoc_insertion_point(field_set:Types.uint32)
}

// uint64 uint64 = 6;
inline void Types::clear_uint64() {
  _impl_.uint64_ = uint64_t{0u};
}
inline uint64_t Types::_internal_uint64() const {
  return _impl_.uint64_;
}
inline uint64_t Types::uint64() const {
  // @@protoc_insertion_point(field_get:Types.uint64)
  return _internal_uint64();
}
inline void Types::_internal_set_uint64(uint64_t value) {
  
  _impl_.uint64_ = value;
}
inline void Types::set_uint64(uint64_t value) {
  _internal_set_uint64(value);
  // @@protoc_insertion_point(field_set:Types.uint64)
}

// sint32 sint32 = 7;
inline void Types::clear_sint32() {
  _impl_.sint32_ = 0;
}
inline int32_t Types::_internal_sint32() const {
  return _impl_.sint32_;
}
inline int32_t Types::sint32() const {
  // @@protoc_insertion_point(field_get:Types.sint32)
  return _internal_sint32();
}
inline void Types::_internal_set_sint32(int32_t value) {
  
  _impl_.sint32_ = value;
}
inline void Types::set_sint32(int32_t value) {
  _internal_set_sint32(value);
  // @@protoc_insertion_point(field_set:Types.sint32)
}

// sint64 sint64 = 8;
inline void Types::clear_sint64() {
  _impl_.sint64_ = int64_t{0};
}
inline int64_t Types::_internal_sint64() const {
  return _impl_.sint64_;
}
inline int64_t Types::sint64() const {
  // @@protoc_insertion_point(field_get:Types.sint64)
  return _internal_sint64();
}
inline void Types::_internal_set_sint64(int64_t value) {
  
  _impl_.sint64_ = value;
}
inline void Types::set_sint64(int64_t value) {
  _internal_set_sint64(value);
  // @@protoc_insertion_point(field_set:Types.sint64)
}

// fixed32 fixed32 = 9;
inline void Types::clear_fixed32() {
  _impl_.fixed32_ = 0u;
}
inline uint32_t Types::_internal_fixed32() const {
  return _impl_.fixed32_;
}
inline uint32_t Types::fixed32() const {
  // @@protoc_insertion_point(field_get:Types.fixed32)
  return _internal_fixed32();
}
inline void Types::_internal_set_fixed32(uint32_t value) {
  
  _impl_.fixed32_ = value;
}
inline void Types::set_fixed32(uint32_t value) {
  _internal_set_fixed32(value);
  // @@protoc_insertion_point(field_set:Types.fixed32)
}

// fixed64 fixed64 = 10;
inline void Types::clear_fixed64() {
  _impl_.fixed64_ = uint64_t{0u};
}
inline uint64_t Types::_internal_fixed64() const {
  return _impl_.fixed64_;
}
inline uint64_t Types::fixed64() const {
  // @@protoc_insertion_point(field_get:Types.fixed64)
  return _internal_fixed64();
}
inline void Types::_internal_set_fixed64(uint64_t value) {
  
  _impl_.fixed64_ = value;
}
inline void Types::set_fixed64(uint64_t value) {
  _internal_set_fixed64(value);
  // @@protoc_insertion_point(field_set:Types.fixed64)
}

// sfixed32 sfixed32 = 11;
inline void Types::clear_sfixed32() {
  _impl_.sfixed32_ = 0;
}
inline int32_t Types::_internal_sfixed32() const {
  return _impl_.sfixed32_;
}
inline int32_t Types::sfixed32() const {
  // @@protoc_insertion_point(field_get:Types.sfixed32)
  return _internal_sfixed32();
}
inline void Types::_internal_set_sfixed32(int32_t value) {
  
  _impl_.sfixed32_ = value;
}
inline void Types::set_sfixed32(int32_t value) {
  _internal_set_sfixed32(value);
  // @@protoc_insertion_point(field_set:Types.sfixed32)
}

// sfixed64 sfixed64 = 12;
inline void Types::clear_sfixed64() {
  _impl_.sfixed64_ = int64_t{0};
}
inline int64_t Types::_internal_sfixed64() const {
  return _impl_.sfixed64_;
}
inline int64_t Types::sfixed64() const {
  // @@protoc_insertion_point(field_get:Types.sfixed64)
  return _internal_sfixed64();
}
inline void Types::_internal_set_sfixed64(int64_t value) {
  
  _impl_.sfixed64_ = value;
}
inline void Types::set_sfixed64(int64_t value) {
  _internal_set_sfixed64(value);
  // @@protoc_insertion_point(field_set:Types.sfixed64)
}

// bool bool = 13;
inline void Types::clear_bool_() {
  _impl_.bool__ = false;
}
inline bool Types::_internal_bool_() const {
  return _impl_.bool__;
}
inline bool Types::bool_() const {
  // @@protoc_insertion_point(field_get:Types.bool)
  return _internal_bool_();
}
inline void Types::_internal_set_bool_(bool value) {
  
  _impl_.bool__ = value;
}
inline void Types::set_bool_(bool value) {
  _internal_set_bool_(value);
  // @@protoc_insertion_point(field_set:Types.bool)
}

// string string = 14;
inline void Types::clear_string() {
  _impl_.string_.ClearToEmpty();
}
inline const std::string& Types::string() const {
  // @@protoc_insertion_point(field_get:Types.string)
  return _internal_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Types::set_string(ArgT0&& arg0, ArgT... args) {
 
 _impl_.string_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Types.string)
}
inline std::string* Types::mutable_string() {
  std::string* _s = _internal_mutable_string();
  // @@protoc_insertion_point(field_mutable:Types.string)
  return _s;
}
inline const std::string& Types::_internal_string() const {
  return _impl_.string_.Get();
}
inline void Types::_internal_set_string(const std::string& value) {
  
  _impl_.string_.Set(value, GetArenaForAllocation());
}
inline std::string* Types::_internal_mutable_string() {
  
  return _impl_.string_.Mutable(GetArenaForAllocation());
}
inline std::string* Types::release_string() {
  // @@protoc_insertion_point(field_release:Types.string)
  return _impl_.string_.Release();
}
inline void Types::set_allocated_string(std::string* string) {
  if (string != nullptr) {
    
  } else {
    
  }
  _impl_.string_.SetAllocated(string, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.string_.IsDefault()) {
    _impl_.string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Types.string)
}

// bytes bytes = 15;
inline void Types::clear_bytes() {
  _impl_.bytes_.ClearToEmpty();
}
inline const std::string& Types::bytes() const {
  // @@protoc_insertion_point(field_get:Types.bytes)
  return _internal_bytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Types::set_bytes(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bytes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Types.bytes)
}
inline std::string* Types::mutable_bytes() {
  std::string* _s = _internal_mutable_bytes();
  // @@protoc_insertion_point(field_mutable:Types.bytes)
  return _s;
}
inline const std::string& Types::_internal_bytes() const {
  return _impl_.bytes_.Get();
}
inline void Types::_internal_set_bytes(const std::string& value) {
  
  _impl_.bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* Types::_internal_mutable_bytes() {
  
  return _impl_.bytes_.Mutable(GetArenaForAllocation());
}
inline std::string* Types::release_bytes() {
  // @@protoc_insertion_point(field_release:Types.bytes)
  return _impl_.bytes_.Release();
}
inline void Types::set_allocated_bytes(std::string* bytes) {
  if (bytes != nullptr) {
    
  } else {
    
  }
  _impl_.bytes_.SetAllocated(bytes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bytes_.IsDefault()) {
    _impl_.bytes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Types.bytes)
}

// -------------------------------------------------------------------

// Mas

// repeated double double = 1;
inline int Mas::_internal_double__size() const {
  return _impl_.double__.size();
}
inline int Mas::double__size() const {
  return _internal_double__size();
}
inline void Mas::clear_double_() {
  _impl_.double__.Clear();
}
inline double Mas::_internal_double_(int index) const {
  return _impl_.double__.Get(index);
}
inline double Mas::double_(int index) const {
  // @@protoc_insertion_point(field_get:Mas.double)
  return _internal_double_(index);
}
inline void Mas::set_double_(int index, double value) {
  _impl_.double__.Set(index, value);
  // @@protoc_insertion_point(field_set:Mas.double)
}
inline void Mas::_internal_add_double_(double value) {
  _impl_.double__.Add(value);
}
inline void Mas::add_double_(double value) {
  _internal_add_double_(value);
  // @@protoc_insertion_point(field_add:Mas.double)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Mas::_internal_double_() const {
  return _impl_.double__;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Mas::double_() const {
  // @@protoc_insertion_point(field_list:Mas.double)
  return _internal_double_();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Mas::_internal_mutable_double_() {
  return &_impl_.double__;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Mas::mutable_double_() {
  // @@protoc_insertion_point(field_mutable_list:Mas.double)
  return _internal_mutable_double_();
}

// repeated float float = 2;
inline int Mas::_internal_float__size() const {
  return _impl_.float__.size();
}
inline int Mas::float__size() const {
  return _internal_float__size();
}
inline void Mas::clear_float_() {
  _impl_.float__.Clear();
}
inline float Mas::_internal_float_(int index) const {
  return _impl_.float__.Get(index);
}
inline float Mas::float_(int index) const {
  // @@protoc_insertion_point(field_get:Mas.float)
  return _internal_float_(index);
}
inline void Mas::set_float_(int index, float value) {
  _impl_.float__.Set(index, value);
  // @@protoc_insertion_point(field_set:Mas.float)
}
inline void Mas::_internal_add_float_(float value) {
  _impl_.float__.Add(value);
}
inline void Mas::add_float_(float value) {
  _internal_add_float_(value);
  // @@protoc_insertion_point(field_add:Mas.float)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Mas::_internal_float_() const {
  return _impl_.float__;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Mas::float_() const {
  // @@protoc_insertion_point(field_list:Mas.float)
  return _internal_float_();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Mas::_internal_mutable_float_() {
  return &_impl_.float__;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Mas::mutable_float_() {
  // @@protoc_insertion_point(field_mutable_list:Mas.float)
  return _internal_mutable_float_();
}

// repeated int32 int32 = 3;
inline int Mas::_internal_int32_size() const {
  return _impl_.int32_.size();
}
inline int Mas::int32_size() const {
  return _internal_int32_size();
}
inline void Mas::clear_int32() {
  _impl_.int32_.Clear();
}
inline int32_t Mas::_internal_int32(int index) const {
  return _impl_.int32_.Get(index);
}
inline int32_t Mas::int32(int index) const {
  // @@protoc_insertion_point(field_get:Mas.int32)
  return _internal_int32(index);
}
inline void Mas::set_int32(int index, int32_t value) {
  _impl_.int32_.Set(index, value);
  // @@protoc_insertion_point(field_set:Mas.int32)
}
inline void Mas::_internal_add_int32(int32_t value) {
  _impl_.int32_.Add(value);
}
inline void Mas::add_int32(int32_t value) {
  _internal_add_int32(value);
  // @@protoc_insertion_point(field_add:Mas.int32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Mas::_internal_int32() const {
  return _impl_.int32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Mas::int32() const {
  // @@protoc_insertion_point(field_list:Mas.int32)
  return _internal_int32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Mas::_internal_mutable_int32() {
  return &_impl_.int32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Mas::mutable_int32() {
  // @@protoc_insertion_point(field_mutable_list:Mas.int32)
  return _internal_mutable_int32();
}

// repeated int64 int64 = 4;
inline int Mas::_internal_int64_size() const {
  return _impl_.int64_.size();
}
inline int Mas::int64_size() const {
  return _internal_int64_size();
}
inline void Mas::clear_int64() {
  _impl_.int64_.Clear();
}
inline int64_t Mas::_internal_int64(int index) const {
  return _impl_.int64_.Get(index);
}
inline int64_t Mas::int64(int index) const {
  // @@protoc_insertion_point(field_get:Mas.int64)
  return _internal_int64(index);
}
inline void Mas::set_int64(int index, int64_t value) {
  _impl_.int64_.Set(index, value);
  // @@protoc_insertion_point(field_set:Mas.int64)
}
inline void Mas::_internal_add_int64(int64_t value) {
  _impl_.int64_.Add(value);
}
inline void Mas::add_int64(int64_t value) {
  _internal_add_int64(value);
  // @@protoc_insertion_point(field_add:Mas.int64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Mas::_internal_int64() const {
  return _impl_.int64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Mas::int64() const {
  // @@protoc_insertion_point(field_list:Mas.int64)
  return _internal_int64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Mas::_internal_mutable_int64() {
  return &_impl_.int64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Mas::mutable_int64() {
  // @@protoc_insertion_point(field_mutable_list:Mas.int64)
  return _internal_mutable_int64();
}

// repeated uint32 uint32 = 5;
inline int Mas::_internal_uint32_size() const {
  return _impl_.uint32_.size();
}
inline int Mas::uint32_size() const {
  return _internal_uint32_size();
}
inline void Mas::clear_uint32() {
  _impl_.uint32_.Clear();
}
inline uint32_t Mas::_internal_uint32(int index) const {
  return _impl_.uint32_.Get(index);
}
inline uint32_t Mas::uint32(int index) const {
  // @@protoc_insertion_point(field_get:Mas.uint32)
  return _internal_uint32(index);
}
inline void Mas::set_uint32(int index, uint32_t value) {
  _impl_.uint32_.Set(index, value);
  // @@protoc_insertion_point(field_set:Mas.uint32)
}
inline void Mas::_internal_add_uint32(uint32_t value) {
  _impl_.uint32_.Add(value);
}
inline void Mas::add_uint32(uint32_t value) {
  _internal_add_uint32(value);
  // @@protoc_insertion_point(field_add:Mas.uint32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Mas::_internal_uint32() const {
  return _impl_.uint32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Mas::uint32() const {
  // @@protoc_insertion_point(field_list:Mas.uint32)
  return _internal_uint32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Mas::_internal_mutable_uint32() {
  return &_impl_.uint32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Mas::mutable_uint32() {
  // @@protoc_insertion_point(field_mutable_list:Mas.uint32)
  return _internal_mutable_uint32();
}

// repeated uint64 uint64 = 6;
inline int Mas::_internal_uint64_size() const {
  return _impl_.uint64_.size();
}
inline int Mas::uint64_size() const {
  return _internal_uint64_size();
}
inline void Mas::clear_uint64() {
  _impl_.uint64_.Clear();
}
inline uint64_t Mas::_internal_uint64(int index) const {
  return _impl_.uint64_.Get(index);
}
inline uint64_t Mas::uint64(int index) const {
  // @@protoc_insertion_point(field_get:Mas.uint64)
  return _internal_uint64(index);
}
inline void Mas::set_uint64(int index, uint64_t value) {
  _impl_.uint64_.Set(index, value);
  // @@protoc_insertion_point(field_set:Mas.uint64)
}
inline void Mas::_internal_add_uint64(uint64_t value) {
  _impl_.uint64_.Add(value);
}
inline void Mas::add_uint64(uint64_t value) {
  _internal_add_uint64(value);
  // @@protoc_insertion_point(field_add:Mas.uint64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
Mas::_internal_uint64() const {
  return _impl_.uint64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
Mas::uint64() const {
  // @@protoc_insertion_point(field_list:Mas.uint64)
  return _internal_uint64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
Mas::_internal_mutable_uint64() {
  return &_impl_.uint64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
Mas::mutable_uint64() {
  // @@protoc_insertion_point(field_mutable_list:Mas.uint64)
  return _internal_mutable_uint64();
}

// repeated sint32 sint32 = 7;
inline int Mas::_internal_sint32_size() const {
  return _impl_.sint32_.size();
}
inline int Mas::sint32_size() const {
  return _internal_sint32_size();
}
inline void Mas::clear_sint32() {
  _impl_.sint32_.Clear();
}
inline int32_t Mas::_internal_sint32(int index) const {
  return _impl_.sint32_.Get(index);
}
inline int32_t Mas::sint32(int index) const {
  // @@protoc_insertion_point(field_get:Mas.sint32)
  return _internal_sint32(index);
}
inline void Mas::set_sint32(int index, int32_t value) {
  _impl_.sint32_.Set(index, value);
  // @@protoc_insertion_point(field_set:Mas.sint32)
}
inline void Mas::_internal_add_sint32(int32_t value) {
  _impl_.sint32_.Add(value);
}
inline void Mas::add_sint32(int32_t value) {
  _internal_add_sint32(value);
  // @@protoc_insertion_point(field_add:Mas.sint32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Mas::_internal_sint32() const {
  return _impl_.sint32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Mas::sint32() const {
  // @@protoc_insertion_point(field_list:Mas.sint32)
  return _internal_sint32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Mas::_internal_mutable_sint32() {
  return &_impl_.sint32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Mas::mutable_sint32() {
  // @@protoc_insertion_point(field_mutable_list:Mas.sint32)
  return _internal_mutable_sint32();
}

// repeated sint64 sint64 = 8;
inline int Mas::_internal_sint64_size() const {
  return _impl_.sint64_.size();
}
inline int Mas::sint64_size() const {
  return _internal_sint64_size();
}
inline void Mas::clear_sint64() {
  _impl_.sint64_.Clear();
}
inline int64_t Mas::_internal_sint64(int index) const {
  return _impl_.sint64_.Get(index);
}
inline int64_t Mas::sint64(int index) const {
  // @@protoc_insertion_point(field_get:Mas.sint64)
  return _internal_sint64(index);
}
inline void Mas::set_sint64(int index, int64_t value) {
  _impl_.sint64_.Set(index, value);
  // @@protoc_insertion_point(field_set:Mas.sint64)
}
inline void Mas::_internal_add_sint64(int64_t value) {
  _impl_.sint64_.Add(value);
}
inline void Mas::add_sint64(int64_t value) {
  _internal_add_sint64(value);
  // @@protoc_insertion_point(field_add:Mas.sint64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Mas::_internal_sint64() const {
  return _impl_.sint64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Mas::sint64() const {
  // @@protoc_insertion_point(field_list:Mas.sint64)
  return _internal_sint64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Mas::_internal_mutable_sint64() {
  return &_impl_.sint64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Mas::mutable_sint64() {
  // @@protoc_insertion_point(field_mutable_list:Mas.sint64)
  return _internal_mutable_sint64();
}

// repeated fixed32 fixed32 = 9;
inline int Mas::_internal_fixed32_size() const {
  return _impl_.fixed32_.size();
}
inline int Mas::fixed32_size() const {
  return _internal_fixed32_size();
}
inline void Mas::clear_fixed32() {
  _impl_.fixed32_.Clear();
}
inline uint32_t Mas::_internal_fixed32(int index) const {
  return _impl_.fixed32_.Get(index);
}
inline uint32_t Mas::fixed32(int index) const {
  // @@protoc_insertion_point(field_get:Mas.fixed32)
  return _internal_fixed32(index);
}
inline void Mas::set_fixed32(int index, uint32_t value) {
  _impl_.fixed32_.Set(index, value);
  // @@protoc_insertion_point(field_set:Mas.fixed32)
}
inline void Mas::_internal_add_fixed32(uint32_t value) {
  _impl_.fixed32_.Add(value);
}
inline void Mas::add_fixed32(uint32_t value) {
  _internal_add_fixed32(value);
  // @@protoc_insertion_point(field_add:Mas.fixed32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Mas::_internal_fixed32() const {
  return _impl_.fixed32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Mas::fixed32() const {
  // @@protoc_insertion_point(field_list:Mas.fixed32)
  return _internal_fixed32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Mas::_internal_mutable_fixed32() {
  return &_impl_.fixed32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Mas::mutable_fixed32() {
  // @@protoc_insertion_point(field_mutable_list:Mas.fixed32)
  return _internal_mutable_fixed32();
}

// repeated fixed64 fixed64 = 10;
inline int Mas::_internal_fixed64_size() const {
  return _impl_.fixed64_.size();
}
inline int Mas::fixed64_size() const {
  return _internal_fixed64_size();
}
inline void Mas::clear_fixed64() {
  _impl_.fixed64_.Clear();
}
inline uint64_t Mas::_internal_fixed64(int index) const {
  return _impl_.fixed64_.Get(index);
}
inline uint64_t Mas::fixed64(int index) const {
  // @@protoc_insertion_point(field_get:Mas.fixed64)
  return _internal_fixed64(index);
}
inline void Mas::set_fixed64(int index, uint64_t value) {
  _impl_.fixed64_.Set(index, value);
  // @@protoc_insertion_point(field_set:Mas.fixed64)
}
inline void Mas::_internal_add_fixed64(uint64_t value) {
  _impl_.fixed64_.Add(value);
}
inline void Mas::add_fixed64(uint64_t value) {
  _internal_add_fixed64(value);
  // @@protoc_insertion_point(field_add:Mas.fixed64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
Mas::_internal_fixed64() const {
  return _impl_.fixed64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
Mas::fixed64() const {
  // @@protoc_insertion_point(field_list:Mas.fixed64)
  return _internal_fixed64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
Mas::_internal_mutable_fixed64() {
  return &_impl_.fixed64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
Mas::mutable_fixed64() {
  // @@protoc_insertion_point(field_mutable_list:Mas.fixed64)
  return _internal_mutable_fixed64();
}

// repeated sfixed32 sfixed32 = 11;
inline int Mas::_internal_sfixed32_size() const {
  return _impl_.sfixed32_.size();
}
inline int Mas::sfixed32_size() const {
  return _internal_sfixed32_size();
}
inline void Mas::clear_sfixed32() {
  _impl_.sfixed32_.Clear();
}
inline int32_t Mas::_internal_sfixed32(int index) const {
  return _impl_.sfixed32_.Get(index);
}
inline int32_t Mas::sfixed32(int index) const {
  // @@protoc_insertion_point(field_get:Mas.sfixed32)
  return _internal_sfixed32(index);
}
inline void Mas::set_sfixed32(int index, int32_t value) {
  _impl_.sfixed32_.Set(index, value);
  // @@protoc_insertion_point(field_set:Mas.sfixed32)
}
inline void Mas::_internal_add_sfixed32(int32_t value) {
  _impl_.sfixed32_.Add(value);
}
inline void Mas::add_sfixed32(int32_t value) {
  _internal_add_sfixed32(value);
  // @@protoc_insertion_point(field_add:Mas.sfixed32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Mas::_internal_sfixed32() const {
  return _impl_.sfixed32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Mas::sfixed32() const {
  // @@protoc_insertion_point(field_list:Mas.sfixed32)
  return _internal_sfixed32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Mas::_internal_mutable_sfixed32() {
  return &_impl_.sfixed32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Mas::mutable_sfixed32() {
  // @@protoc_insertion_point(field_mutable_list:Mas.sfixed32)
  return _internal_mutable_sfixed32();
}

// repeated sfixed64 sfixed64 = 12;
inline int Mas::_internal_sfixed64_size() const {
  return _impl_.sfixed64_.size();
}
inline int Mas::sfixed64_size() const {
  return _internal_sfixed64_size();
}
inline void Mas::clear_sfixed64() {
  _impl_.sfixed64_.Clear();
}
inline int64_t Mas::_internal_sfixed64(int index) const {
  return _impl_.sfixed64_.Get(index);
}
inline int64_t Mas::sfixed64(int index) const {
  // @@protoc_insertion_point(field_get:Mas.sfixed64)
  return _internal_sfixed64(index);
}
inline void Mas::set_sfixed64(int index, int64_t value) {
  _impl_.sfixed64_.Set(index, value);
  // @@protoc_insertion_point(field_set:Mas.sfixed64)
}
inline void Mas::_internal_add_sfixed64(int64_t value) {
  _impl_.sfixed64_.Add(value);
}
inline void Mas::add_sfixed64(int64_t value) {
  _internal_add_sfixed64(value);
  // @@protoc_insertion_point(field_add:Mas.sfixed64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Mas::_internal_sfixed64() const {
  return _impl_.sfixed64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
Mas::sfixed64() const {
  // @@protoc_insertion_point(field_list:Mas.sfixed64)
  return _internal_sfixed64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Mas::_internal_mutable_sfixed64() {
  return &_impl_.sfixed64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
Mas::mutable_sfixed64() {
  // @@protoc_insertion_point(field_mutable_list:Mas.sfixed64)
  return _internal_mutable_sfixed64();
}

// repeated bool bool = 13;
inline int Mas::_internal_bool__size() const {
  return _impl_.bool__.size();
}
inline int Mas::bool__size() const {
  return _internal_bool__size();
}
inline void Mas::clear_bool_() {
  _impl_.bool__.Clear();
}
inline bool Mas::_internal_bool_(int index) const {
  return _impl_.bool__.Get(index);
}
inline bool Mas::bool_(int index) const {
  // @@protoc_insertion_point(field_get:Mas.bool)
  return _internal_bool_(index);
}
inline void Mas::set_bool_(int index, bool value) {
  _impl_.bool__.Set(index, value);
  // @@protoc_insertion_point(field_set:Mas.bool)
}
inline void Mas::_internal_add_bool_(bool value) {
  _impl_.bool__.Add(value);
}
inline void Mas::add_bool_(bool value) {
  _internal_add_bool_(value);
  // @@protoc_insertion_point(field_add:Mas.bool)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
Mas::_internal_bool_() const {
  return _impl_.bool__;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
Mas::bool_() const {
  // @@protoc_insertion_point(field_list:Mas.bool)
  return _internal_bool_();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
Mas::_internal_mutable_bool_() {
  return &_impl_.bool__;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
Mas::mutable_bool_() {
  // @@protoc_insertion_point(field_mutable_list:Mas.bool)
  return _internal_mutable_bool_();
}

// repeated string string = 14;
inline int Mas::_internal_string_size() const {
  return _impl_.string_.size();
}
inline int Mas::string_size() const {
  return _internal_string_size();
}
inline void Mas::clear_string() {
  _impl_.string_.Clear();
}
inline std::string* Mas::add_string() {
  std::string* _s = _internal_add_string();
  // @@protoc_insertion_point(field_add_mutable:Mas.string)
  return _s;
}
inline const std::string& Mas::_internal_string(int index) const {
  return _impl_.string_.Get(index);
}
inline const std::string& Mas::string(int index) const {
  // @@protoc_insertion_point(field_get:Mas.string)
  return _internal_string(index);
}
inline std::string* Mas::mutable_string(int index) {
  // @@protoc_insertion_point(field_mutable:Mas.string)
  return _impl_.string_.Mutable(index);
}
inline void Mas::set_string(int index, const std::string& value) {
  _impl_.string_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Mas.string)
}
inline void Mas::set_string(int index, std::string&& value) {
  _impl_.string_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Mas.string)
}
inline void Mas::set_string(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.string_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Mas.string)
}
inline void Mas::set_string(int index, const char* value, size_t size) {
  _impl_.string_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Mas.string)
}
inline std::string* Mas::_internal_add_string() {
  return _impl_.string_.Add();
}
inline void Mas::add_string(const std::string& value) {
  _impl_.string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Mas.string)
}
inline void Mas::add_string(std::string&& value) {
  _impl_.string_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Mas.string)
}
inline void Mas::add_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.string_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Mas.string)
}
inline void Mas::add_string(const char* value, size_t size) {
  _impl_.string_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Mas.string)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Mas::string() const {
  // @@protoc_insertion_point(field_list:Mas.string)
  return _impl_.string_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Mas::mutable_string() {
  // @@protoc_insertion_point(field_mutable_list:Mas.string)
  return &_impl_.string_;
}

// repeated bytes bytes = 15;
inline int Mas::_internal_bytes_size() const {
  return _impl_.bytes_.size();
}
inline int Mas::bytes_size() const {
  return _internal_bytes_size();
}
inline void Mas::clear_bytes() {
  _impl_.bytes_.Clear();
}
inline std::string* Mas::add_bytes() {
  std::string* _s = _internal_add_bytes();
  // @@protoc_insertion_point(field_add_mutable:Mas.bytes)
  return _s;
}
inline const std::string& Mas::_internal_bytes(int index) const {
  return _impl_.bytes_.Get(index);
}
inline const std::string& Mas::bytes(int index) const {
  // @@protoc_insertion_point(field_get:Mas.bytes)
  return _internal_bytes(index);
}
inline std::string* Mas::mutable_bytes(int index) {
  // @@protoc_insertion_point(field_mutable:Mas.bytes)
  return _impl_.bytes_.Mutable(index);
}
inline void Mas::set_bytes(int index, const std::string& value) {
  _impl_.bytes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Mas.bytes)
}
inline void Mas::set_bytes(int index, std::string&& value) {
  _impl_.bytes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Mas.bytes)
}
inline void Mas::set_bytes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.bytes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Mas.bytes)
}
inline void Mas::set_bytes(int index, const void* value, size_t size) {
  _impl_.bytes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Mas.bytes)
}
inline std::string* Mas::_internal_add_bytes() {
  return _impl_.bytes_.Add();
}
inline void Mas::add_bytes(const std::string& value) {
  _impl_.bytes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Mas.bytes)
}
inline void Mas::add_bytes(std::string&& value) {
  _impl_.bytes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Mas.bytes)
}
inline void Mas::add_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.bytes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Mas.bytes)
}
inline void Mas::add_bytes(const void* value, size_t size) {
  _impl_.bytes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Mas.bytes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Mas::bytes() const {
  // @@protoc_insertion_point(field_list:Mas.bytes)
  return _impl_.bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Mas::mutable_bytes() {
  // @@protoc_insertion_point(field_mutable_list:Mas.bytes)
  return &_impl_.bytes_;
}

// -------------------------------------------------------------------

// Enum

// .Enum.Status status = 1;
inline void Enum::clear_status() {
  _impl_.status_ = 0;
}
inline ::Enum_Status Enum::_internal_status() const {
  return static_cast< ::Enum_Status >(_impl_.status_);
}
inline ::Enum_Status Enum::status() const {
  // @@protoc_insertion_point(field_get:Enum.status)
  return _internal_status();
}
inline void Enum::_internal_set_status(::Enum_Status value) {
  
  _impl_.status_ = value;
}
inline void Enum::set_status(::Enum_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:Enum.status)
}

// -------------------------------------------------------------------

// Father_Daughter

// string name = 1;
inline void Father_Daughter::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Father_Daughter::name() const {
  // @@protoc_insertion_point(field_get:Father.Daughter.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Father_Daughter::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Father.Daughter.name)
}
inline std::string* Father_Daughter::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Father.Daughter.name)
  return _s;
}
inline const std::string& Father_Daughter::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Father_Daughter::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Father_Daughter::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Father_Daughter::release_name() {
  // @@protoc_insertion_point(field_release:Father.Daughter.name)
  return _impl_.name_.Release();
}
inline void Father_Daughter::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Father.Daughter.name)
}

// -------------------------------------------------------------------

// Father

// repeated .Father.Daughter daughter = 1;
inline int Father::_internal_daughter_size() const {
  return _impl_.daughter_.size();
}
inline int Father::daughter_size() const {
  return _internal_daughter_size();
}
inline void Father::clear_daughter() {
  _impl_.daughter_.Clear();
}
inline ::Father_Daughter* Father::mutable_daughter(int index) {
  // @@protoc_insertion_point(field_mutable:Father.daughter)
  return _impl_.daughter_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Father_Daughter >*
Father::mutable_daughter() {
  // @@protoc_insertion_point(field_mutable_list:Father.daughter)
  return &_impl_.daughter_;
}
inline const ::Father_Daughter& Father::_internal_daughter(int index) const {
  return _impl_.daughter_.Get(index);
}
inline const ::Father_Daughter& Father::daughter(int index) const {
  // @@protoc_insertion_point(field_get:Father.daughter)
  return _internal_daughter(index);
}
inline ::Father_Daughter* Father::_internal_add_daughter() {
  return _impl_.daughter_.Add();
}
inline ::Father_Daughter* Father::add_daughter() {
  ::Father_Daughter* _add = _internal_add_daughter();
  // @@protoc_insertion_point(field_add:Father.daughter)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Father_Daughter >&
Father::daughter() const {
  // @@protoc_insertion_point(field_list:Father.daughter)
  return _impl_.daughter_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Enum_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Enum_Status>() {
  return ::Enum_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_data_2eproto

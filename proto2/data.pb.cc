// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#include "data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR Types::Types(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bytes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.float__)*/0
  , /*decltype(_impl_.int32_)*/0
  , /*decltype(_impl_.int64_)*/int64_t{0}
  , /*decltype(_impl_.uint64_)*/uint64_t{0u}
  , /*decltype(_impl_.uint32_)*/0u
  , /*decltype(_impl_.sint32_)*/0
  , /*decltype(_impl_.sint64_)*/int64_t{0}
  , /*decltype(_impl_.fixed64_)*/uint64_t{0u}
  , /*decltype(_impl_.fixed32_)*/0u
  , /*decltype(_impl_.sfixed32_)*/0
  , /*decltype(_impl_.sfixed64_)*/int64_t{0}
  , /*decltype(_impl_.bool__)*/false
  , /*decltype(_impl_.double__)*/10} {}
struct TypesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TypesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TypesDefaultTypeInternal() {}
  union {
    Types _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TypesDefaultTypeInternal _Types_default_instance_;
PROTOBUF_CONSTEXPR Mas::Mas(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.double__)*/{}
  , /*decltype(_impl_.float__)*/{}
  , /*decltype(_impl_.int32_)*/{}
  , /*decltype(_impl_.int64_)*/{}
  , /*decltype(_impl_.uint32_)*/{}
  , /*decltype(_impl_.uint64_)*/{}
  , /*decltype(_impl_.sint32_)*/{}
  , /*decltype(_impl_.sint64_)*/{}
  , /*decltype(_impl_.fixed32_)*/{}
  , /*decltype(_impl_.fixed64_)*/{}
  , /*decltype(_impl_.sfixed32_)*/{}
  , /*decltype(_impl_.sfixed64_)*/{}
  , /*decltype(_impl_.bool__)*/{}
  , /*decltype(_impl_.string_)*/{}
  , /*decltype(_impl_.bytes_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MasDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MasDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MasDefaultTypeInternal() {}
  union {
    Mas _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MasDefaultTypeInternal _Mas_default_instance_;
PROTOBUF_CONSTEXPR Enum::Enum(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.status_)*/1} {}
struct EnumDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnumDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnumDefaultTypeInternal() {}
  union {
    Enum _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnumDefaultTypeInternal _Enum_default_instance_;
PROTOBUF_CONSTEXPR Father_Daughter::Father_Daughter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct Father_DaughterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Father_DaughterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Father_DaughterDefaultTypeInternal() {}
  union {
    Father_Daughter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Father_DaughterDefaultTypeInternal _Father_Daughter_default_instance_;
PROTOBUF_CONSTEXPR Father::Father(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.daughter_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FatherDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FatherDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FatherDefaultTypeInternal() {}
  union {
    Father _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FatherDefaultTypeInternal _Father_default_instance_;
static ::_pb::Metadata file_level_metadata_data_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_data_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_data_2eproto = nullptr;

const uint32_t TableStruct_data_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Types, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Types, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Types, _impl_.double__),
  PROTOBUF_FIELD_OFFSET(::Types, _impl_.float__),
  PROTOBUF_FIELD_OFFSET(::Types, _impl_.int32_),
  PROTOBUF_FIELD_OFFSET(::Types, _impl_.int64_),
  PROTOBUF_FIELD_OFFSET(::Types, _impl_.uint32_),
  PROTOBUF_FIELD_OFFSET(::Types, _impl_.uint64_),
  PROTOBUF_FIELD_OFFSET(::Types, _impl_.sint32_),
  PROTOBUF_FIELD_OFFSET(::Types, _impl_.sint64_),
  PROTOBUF_FIELD_OFFSET(::Types, _impl_.fixed32_),
  PROTOBUF_FIELD_OFFSET(::Types, _impl_.fixed64_),
  PROTOBUF_FIELD_OFFSET(::Types, _impl_.sfixed32_),
  PROTOBUF_FIELD_OFFSET(::Types, _impl_.sfixed64_),
  PROTOBUF_FIELD_OFFSET(::Types, _impl_.bool__),
  PROTOBUF_FIELD_OFFSET(::Types, _impl_.string_),
  PROTOBUF_FIELD_OFFSET(::Types, _impl_.bytes_),
  14,
  2,
  3,
  4,
  6,
  5,
  7,
  8,
  10,
  9,
  11,
  12,
  13,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Mas, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Mas, _impl_.double__),
  PROTOBUF_FIELD_OFFSET(::Mas, _impl_.float__),
  PROTOBUF_FIELD_OFFSET(::Mas, _impl_.int32_),
  PROTOBUF_FIELD_OFFSET(::Mas, _impl_.int64_),
  PROTOBUF_FIELD_OFFSET(::Mas, _impl_.uint32_),
  PROTOBUF_FIELD_OFFSET(::Mas, _impl_.uint64_),
  PROTOBUF_FIELD_OFFSET(::Mas, _impl_.sint32_),
  PROTOBUF_FIELD_OFFSET(::Mas, _impl_.sint64_),
  PROTOBUF_FIELD_OFFSET(::Mas, _impl_.fixed32_),
  PROTOBUF_FIELD_OFFSET(::Mas, _impl_.fixed64_),
  PROTOBUF_FIELD_OFFSET(::Mas, _impl_.sfixed32_),
  PROTOBUF_FIELD_OFFSET(::Mas, _impl_.sfixed64_),
  PROTOBUF_FIELD_OFFSET(::Mas, _impl_.bool__),
  PROTOBUF_FIELD_OFFSET(::Mas, _impl_.string_),
  PROTOBUF_FIELD_OFFSET(::Mas, _impl_.bytes_),
  PROTOBUF_FIELD_OFFSET(::Enum, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Enum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Enum, _impl_.status_),
  0,
  PROTOBUF_FIELD_OFFSET(::Father_Daughter, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Father_Daughter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Father_Daughter, _impl_.name_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Father, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Father, _impl_.daughter_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 21, -1, sizeof(::Types)},
  { 36, -1, -1, sizeof(::Mas)},
  { 57, 64, -1, sizeof(::Enum)},
  { 65, 72, -1, sizeof(::Father_Daughter)},
  { 73, -1, -1, sizeof(::Father)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_Types_default_instance_._instance,
  &::_Mas_default_instance_._instance,
  &::_Enum_default_instance_._instance,
  &::_Father_Daughter_default_instance_._instance,
  &::_Father_default_instance_._instance,
};

const char descriptor_table_protodef_data_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ndata.proto\"\373\001\n\005Types\022\022\n\006double\030\001 \001(\001:\002"
  "10\022\r\n\005float\030\002 \002(\002\022\r\n\005int32\030\003 \002(\005\022\r\n\005int6"
  "4\030\004 \002(\003\022\016\n\006uint32\030\005 \002(\r\022\016\n\006uint64\030\006 \002(\004\022"
  "\016\n\006sint32\030\007 \002(\021\022\016\n\006sint64\030\010 \002(\022\022\017\n\007fixed"
  "32\030\t \002(\007\022\017\n\007fixed64\030\n \002(\006\022\020\n\010sfixed32\030\013 "
  "\002(\017\022\020\n\010sfixed64\030\014 \002(\020\022\014\n\004bool\030\r \002(\010\022\016\n\006s"
  "tring\030\016 \002(\t\022\r\n\005bytes\030\017 \002(\014\"\365\001\n\003Mas\022\016\n\006do"
  "uble\030\001 \003(\001\022\r\n\005float\030\002 \003(\002\022\r\n\005int32\030\003 \003(\005"
  "\022\r\n\005int64\030\004 \003(\003\022\016\n\006uint32\030\005 \003(\r\022\016\n\006uint6"
  "4\030\006 \003(\004\022\016\n\006sint32\030\007 \003(\021\022\016\n\006sint64\030\010 \003(\022\022"
  "\017\n\007fixed32\030\t \003(\007\022\017\n\007fixed64\030\n \003(\006\022\020\n\010sfi"
  "xed32\030\013 \003(\017\022\020\n\010sfixed64\030\014 \003(\020\022\014\n\004bool\030\r "
  "\003(\010\022\016\n\006string\030\016 \003(\t\022\r\n\005bytes\030\017 \003(\014\"X\n\004En"
  "um\022$\n\006status\030\001 \001(\0162\014.Enum.Status:\006SECOND"
  "\"*\n\006Status\022\t\n\005FIRST\020\000\022\n\n\006SECOND\020\001\022\t\n\005THI"
  "RD\020\002\"F\n\006Father\022\"\n\010daughter\030\001 \003(\0132\020.Fathe"
  "r.Daughter\032\030\n\010Daughter\022\014\n\004name\030\001 \002(\t"
  ;
static ::_pbi::once_flag descriptor_table_data_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_data_2eproto = {
    false, false, 676, descriptor_table_protodef_data_2eproto,
    "data.proto",
    &descriptor_table_data_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_data_2eproto::offsets,
    file_level_metadata_data_2eproto, file_level_enum_descriptors_data_2eproto,
    file_level_service_descriptors_data_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_data_2eproto_getter() {
  return &descriptor_table_data_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_data_2eproto(&descriptor_table_data_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Enum_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_data_2eproto);
  return file_level_enum_descriptors_data_2eproto[0];
}
bool Enum_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Enum_Status Enum::FIRST;
constexpr Enum_Status Enum::SECOND;
constexpr Enum_Status Enum::THIRD;
constexpr Enum_Status Enum::Status_MIN;
constexpr Enum_Status Enum::Status_MAX;
constexpr int Enum::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Types::_Internal {
 public:
  using HasBits = decltype(std::declval<Types>()._impl_._has_bits_);
  static void set_has_double_(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_float_(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_int32(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_int64(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_uint32(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_uint64(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sint32(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_sint64(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_fixed32(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_fixed64(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_sfixed32(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_sfixed64(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_bool_(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00003fff) ^ 0x00003fff) != 0;
  }
};

Types::Types(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Types)
}
Types::Types(const Types& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Types* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.string_){}
    , decltype(_impl_.bytes_){}
    , decltype(_impl_.float__){}
    , decltype(_impl_.int32_){}
    , decltype(_impl_.int64_){}
    , decltype(_impl_.uint64_){}
    , decltype(_impl_.uint32_){}
    , decltype(_impl_.sint32_){}
    , decltype(_impl_.sint64_){}
    , decltype(_impl_.fixed64_){}
    , decltype(_impl_.fixed32_){}
    , decltype(_impl_.sfixed32_){}
    , decltype(_impl_.sfixed64_){}
    , decltype(_impl_.bool__){}
    , decltype(_impl_.double__){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_string()) {
    _this->_impl_.string_.Set(from._internal_string(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_bytes()) {
    _this->_impl_.bytes_.Set(from._internal_bytes(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.float__, &from._impl_.float__,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.double__) -
    reinterpret_cast<char*>(&_impl_.float__)) + sizeof(_impl_.double__));
  // @@protoc_insertion_point(copy_constructor:Types)
}

inline void Types::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.string_){}
    , decltype(_impl_.bytes_){}
    , decltype(_impl_.float__){0}
    , decltype(_impl_.int32_){0}
    , decltype(_impl_.int64_){int64_t{0}}
    , decltype(_impl_.uint64_){uint64_t{0u}}
    , decltype(_impl_.uint32_){0u}
    , decltype(_impl_.sint32_){0}
    , decltype(_impl_.sint64_){int64_t{0}}
    , decltype(_impl_.fixed64_){uint64_t{0u}}
    , decltype(_impl_.fixed32_){0u}
    , decltype(_impl_.sfixed32_){0}
    , decltype(_impl_.sfixed64_){int64_t{0}}
    , decltype(_impl_.bool__){false}
    , decltype(_impl_.double__){10}
  };
  _impl_.string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Types::~Types() {
  // @@protoc_insertion_point(destructor:Types)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Types::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.string_.Destroy();
  _impl_.bytes_.Destroy();
}

void Types::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Types::Clear() {
// @@protoc_insertion_point(message_clear_start:Types)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.bytes_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.float__, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.sint32_) -
        reinterpret_cast<char*>(&_impl_.float__)) + sizeof(_impl_.sint32_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&_impl_.sint64_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.bool__) -
        reinterpret_cast<char*>(&_impl_.sint64_)) + sizeof(_impl_.bool__));
    _impl_.double__ = 10;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Types::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double double = 1 [default = 10];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_double_(&has_bits);
          _impl_.double__ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required float float = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_float_(&has_bits);
          _impl_.float__ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required int32 int32 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_int32(&has_bits);
          _impl_.int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 int64 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_int64(&has_bits);
          _impl_.int64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 uint32 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_uint32(&has_bits);
          _impl_.uint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 uint64 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_uint64(&has_bits);
          _impl_.uint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required sint32 sint32 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_sint32(&has_bits);
          _impl_.sint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required sint64 sint64 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_sint64(&has_bits);
          _impl_.sint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required fixed32 fixed32 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_fixed32(&has_bits);
          _impl_.fixed32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // required fixed64 fixed64 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_fixed64(&has_bits);
          _impl_.fixed64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // required sfixed32 sfixed32 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _Internal::set_has_sfixed32(&has_bits);
          _impl_.sfixed32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr);
          ptr += sizeof(int32_t);
        } else
          goto handle_unusual;
        continue;
      // required sfixed64 sfixed64 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _Internal::set_has_sfixed64(&has_bits);
          _impl_.sfixed64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int64_t>(ptr);
          ptr += sizeof(int64_t);
        } else
          goto handle_unusual;
        continue;
      // required bool bool = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_bool_(&has_bits);
          _impl_.bool__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string string = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "Types.string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required bytes bytes = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_bytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Types::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Types)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double double = 1 [default = 10];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_double_(), target);
  }

  // required float float = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_float_(), target);
  }

  // required int32 int32 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_int32(), target);
  }

  // required int64 int64 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_int64(), target);
  }

  // required uint32 uint32 = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_uint32(), target);
  }

  // required uint64 uint64 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_uint64(), target);
  }

  // required sint32 sint32 = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(7, this->_internal_sint32(), target);
  }

  // required sint64 sint64 = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(8, this->_internal_sint64(), target);
  }

  // required fixed32 fixed32 = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(9, this->_internal_fixed32(), target);
  }

  // required fixed64 fixed64 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(10, this->_internal_fixed64(), target);
  }

  // required sfixed32 sfixed32 = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed32ToArray(11, this->_internal_sfixed32(), target);
  }

  // required sfixed64 sfixed64 = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed64ToArray(12, this->_internal_sfixed64(), target);
  }

  // required bool bool = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_bool_(), target);
  }

  // required string string = 14;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string().data(), static_cast<int>(this->_internal_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Types.string");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_string(), target);
  }

  // required bytes bytes = 15;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        15, this->_internal_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Types)
  return target;
}

size_t Types::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Types)
  size_t total_size = 0;

  if (_internal_has_string()) {
    // required string string = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_string());
  }

  if (_internal_has_bytes()) {
    // required bytes bytes = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bytes());
  }

  if (_internal_has_float_()) {
    // required float float = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_int32()) {
    // required int32 int32 = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_int32());
  }

  if (_internal_has_int64()) {
    // required int64 int64 = 4;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_int64());
  }

  if (_internal_has_uint64()) {
    // required uint64 uint64 = 6;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_uint64());
  }

  if (_internal_has_uint32()) {
    // required uint32 uint32 = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uint32());
  }

  if (_internal_has_sint32()) {
    // required sint32 sint32 = 7;
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_sint32());
  }

  if (_internal_has_sint64()) {
    // required sint64 sint64 = 8;
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_sint64());
  }

  if (_internal_has_fixed64()) {
    // required fixed64 fixed64 = 10;
    total_size += 1 + 8;
  }

  if (_internal_has_fixed32()) {
    // required fixed32 fixed32 = 9;
    total_size += 1 + 4;
  }

  if (_internal_has_sfixed32()) {
    // required sfixed32 sfixed32 = 11;
    total_size += 1 + 4;
  }

  if (_internal_has_sfixed64()) {
    // required sfixed64 sfixed64 = 12;
    total_size += 1 + 8;
  }

  if (_internal_has_bool_()) {
    // required bool bool = 13;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t Types::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Types)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00003fff) ^ 0x00003fff) == 0) {  // All required fields are present.
    // required string string = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_string());

    // required bytes bytes = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bytes());

    // required float float = 2;
    total_size += 1 + 4;

    // required int32 int32 = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_int32());

    // required int64 int64 = 4;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_int64());

    // required uint64 uint64 = 6;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_uint64());

    // required uint32 uint32 = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uint32());

    // required sint32 sint32 = 7;
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_sint32());

    // required sint64 sint64 = 8;
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_sint64());

    // required fixed64 fixed64 = 10;
    total_size += 1 + 8;

    // required fixed32 fixed32 = 9;
    total_size += 1 + 4;

    // required sfixed32 sfixed32 = 11;
    total_size += 1 + 4;

    // required sfixed64 sfixed64 = 12;
    total_size += 1 + 8;

    // required bool bool = 13;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double double = 1 [default = 10];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00004000u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Types::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Types::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Types::GetClassData() const { return &_class_data_; }


void Types::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Types*>(&to_msg);
  auto& from = static_cast<const Types&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Types)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_string(from._internal_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_bytes(from._internal_bytes());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.float__ = from._impl_.float__;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.int32_ = from._impl_.int32_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.int64_ = from._impl_.int64_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.uint64_ = from._impl_.uint64_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.uint32_ = from._impl_.uint32_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.sint32_ = from._impl_.sint32_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.sint64_ = from._impl_.sint64_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.fixed64_ = from._impl_.fixed64_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.fixed32_ = from._impl_.fixed32_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.sfixed32_ = from._impl_.sfixed32_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.sfixed64_ = from._impl_.sfixed64_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.bool__ = from._impl_.bool__;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.double__ = from._impl_.double__;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Types::CopyFrom(const Types& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Types)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Types::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void Types::InternalSwap(Types* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.string_, lhs_arena,
      &other->_impl_.string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bytes_, lhs_arena,
      &other->_impl_.bytes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Types, _impl_.bool__)
      + sizeof(Types::_impl_.bool__)
      - PROTOBUF_FIELD_OFFSET(Types, _impl_.float__)>(
          reinterpret_cast<char*>(&_impl_.float__),
          reinterpret_cast<char*>(&other->_impl_.float__));
  swap(_impl_.double__, other->_impl_.double__);
}

::PROTOBUF_NAMESPACE_ID::Metadata Types::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[0]);
}

// ===================================================================

class Mas::_Internal {
 public:
};

Mas::Mas(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Mas)
}
Mas::Mas(const Mas& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Mas* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.double__){from._impl_.double__}
    , decltype(_impl_.float__){from._impl_.float__}
    , decltype(_impl_.int32_){from._impl_.int32_}
    , decltype(_impl_.int64_){from._impl_.int64_}
    , decltype(_impl_.uint32_){from._impl_.uint32_}
    , decltype(_impl_.uint64_){from._impl_.uint64_}
    , decltype(_impl_.sint32_){from._impl_.sint32_}
    , decltype(_impl_.sint64_){from._impl_.sint64_}
    , decltype(_impl_.fixed32_){from._impl_.fixed32_}
    , decltype(_impl_.fixed64_){from._impl_.fixed64_}
    , decltype(_impl_.sfixed32_){from._impl_.sfixed32_}
    , decltype(_impl_.sfixed64_){from._impl_.sfixed64_}
    , decltype(_impl_.bool__){from._impl_.bool__}
    , decltype(_impl_.string_){from._impl_.string_}
    , decltype(_impl_.bytes_){from._impl_.bytes_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Mas)
}

inline void Mas::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.double__){arena}
    , decltype(_impl_.float__){arena}
    , decltype(_impl_.int32_){arena}
    , decltype(_impl_.int64_){arena}
    , decltype(_impl_.uint32_){arena}
    , decltype(_impl_.uint64_){arena}
    , decltype(_impl_.sint32_){arena}
    , decltype(_impl_.sint64_){arena}
    , decltype(_impl_.fixed32_){arena}
    , decltype(_impl_.fixed64_){arena}
    , decltype(_impl_.sfixed32_){arena}
    , decltype(_impl_.sfixed64_){arena}
    , decltype(_impl_.bool__){arena}
    , decltype(_impl_.string_){arena}
    , decltype(_impl_.bytes_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Mas::~Mas() {
  // @@protoc_insertion_point(destructor:Mas)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Mas::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.double__.~RepeatedField();
  _impl_.float__.~RepeatedField();
  _impl_.int32_.~RepeatedField();
  _impl_.int64_.~RepeatedField();
  _impl_.uint32_.~RepeatedField();
  _impl_.uint64_.~RepeatedField();
  _impl_.sint32_.~RepeatedField();
  _impl_.sint64_.~RepeatedField();
  _impl_.fixed32_.~RepeatedField();
  _impl_.fixed64_.~RepeatedField();
  _impl_.sfixed32_.~RepeatedField();
  _impl_.sfixed64_.~RepeatedField();
  _impl_.bool__.~RepeatedField();
  _impl_.string_.~RepeatedPtrField();
  _impl_.bytes_.~RepeatedPtrField();
}

void Mas::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Mas::Clear() {
// @@protoc_insertion_point(message_clear_start:Mas)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.double__.Clear();
  _impl_.float__.Clear();
  _impl_.int32_.Clear();
  _impl_.int64_.Clear();
  _impl_.uint32_.Clear();
  _impl_.uint64_.Clear();
  _impl_.sint32_.Clear();
  _impl_.sint64_.Clear();
  _impl_.fixed32_.Clear();
  _impl_.fixed64_.Clear();
  _impl_.sfixed32_.Clear();
  _impl_.sfixed64_.Clear();
  _impl_.bool__.Clear();
  _impl_.string_.Clear();
  _impl_.bytes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mas::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double double = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_double_(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_double_(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float float = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_float_(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<21>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_float_(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 int32 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_int32(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 int64 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_int64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_int64(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 uint32 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_uint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_uint32(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 uint64 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_uint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_uint64(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated sint32 sint32 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_sint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<uint8_t>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_sint32(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated sint64 sint64 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_sint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<uint8_t>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt64Parser(_internal_mutable_sint64(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed32 fixed32 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_fixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr));
            ptr += sizeof(uint32_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<77>(ptr));
        } else if (static_cast<uint8_t>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_fixed32(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed64 fixed64 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_fixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
            ptr += sizeof(uint64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<81>(ptr));
        } else if (static_cast<uint8_t>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_fixed64(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated sfixed32 sfixed32 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_sfixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int32_t>(ptr));
            ptr += sizeof(int32_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<93>(ptr));
        } else if (static_cast<uint8_t>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed32Parser(_internal_mutable_sfixed32(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated sfixed64 sfixed64 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_sfixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<int64_t>(ptr));
            ptr += sizeof(int64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<97>(ptr));
        } else if (static_cast<uint8_t>(tag) == 98) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed64Parser(_internal_mutable_sfixed64(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool bool = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_bool_(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<104>(ptr));
        } else if (static_cast<uint8_t>(tag) == 106) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_bool_(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string string = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_string();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "Mas.string");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated bytes bytes = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_bytes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Mas::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Mas)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double double = 1;
  for (int i = 0, n = this->_internal_double__size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_double_(i), target);
  }

  // repeated float float = 2;
  for (int i = 0, n = this->_internal_float__size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_float_(i), target);
  }

  // repeated int32 int32 = 3;
  for (int i = 0, n = this->_internal_int32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_int32(i), target);
  }

  // repeated int64 int64 = 4;
  for (int i = 0, n = this->_internal_int64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_int64(i), target);
  }

  // repeated uint32 uint32 = 5;
  for (int i = 0, n = this->_internal_uint32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_uint32(i), target);
  }

  // repeated uint64 uint64 = 6;
  for (int i = 0, n = this->_internal_uint64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_uint64(i), target);
  }

  // repeated sint32 sint32 = 7;
  for (int i = 0, n = this->_internal_sint32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(7, this->_internal_sint32(i), target);
  }

  // repeated sint64 sint64 = 8;
  for (int i = 0, n = this->_internal_sint64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(8, this->_internal_sint64(i), target);
  }

  // repeated fixed32 fixed32 = 9;
  for (int i = 0, n = this->_internal_fixed32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(9, this->_internal_fixed32(i), target);
  }

  // repeated fixed64 fixed64 = 10;
  for (int i = 0, n = this->_internal_fixed64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(10, this->_internal_fixed64(i), target);
  }

  // repeated sfixed32 sfixed32 = 11;
  for (int i = 0, n = this->_internal_sfixed32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed32ToArray(11, this->_internal_sfixed32(i), target);
  }

  // repeated sfixed64 sfixed64 = 12;
  for (int i = 0, n = this->_internal_sfixed64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed64ToArray(12, this->_internal_sfixed64(i), target);
  }

  // repeated bool bool = 13;
  for (int i = 0, n = this->_internal_bool__size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_bool_(i), target);
  }

  // repeated string string = 14;
  for (int i = 0, n = this->_internal_string_size(); i < n; i++) {
    const auto& s = this->_internal_string(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Mas.string");
    target = stream->WriteString(14, s, target);
  }

  // repeated bytes bytes = 15;
  for (int i = 0, n = this->_internal_bytes_size(); i < n; i++) {
    const auto& s = this->_internal_bytes(i);
    target = stream->WriteBytes(15, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mas)
  return target;
}

size_t Mas::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mas)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double double = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_double__size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_double__size());
    total_size += data_size;
  }

  // repeated float float = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_float__size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_float__size());
    total_size += data_size;
  }

  // repeated int32 int32 = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.int32_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_int32_size());
    total_size += data_size;
  }

  // repeated int64 int64 = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.int64_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_int64_size());
    total_size += data_size;
  }

  // repeated uint32 uint32 = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.uint32_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_uint32_size());
    total_size += data_size;
  }

  // repeated uint64 uint64 = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.uint64_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_uint64_size());
    total_size += data_size;
  }

  // repeated sint32 sint32 = 7;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      SInt32Size(this->_impl_.sint32_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_sint32_size());
    total_size += data_size;
  }

  // repeated sint64 sint64 = 8;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      SInt64Size(this->_impl_.sint64_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_sint64_size());
    total_size += data_size;
  }

  // repeated fixed32 fixed32 = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_fixed32_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_fixed32_size());
    total_size += data_size;
  }

  // repeated fixed64 fixed64 = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_fixed64_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_fixed64_size());
    total_size += data_size;
  }

  // repeated sfixed32 sfixed32 = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_sfixed32_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_sfixed32_size());
    total_size += data_size;
  }

  // repeated sfixed64 sfixed64 = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_sfixed64_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_sfixed64_size());
    total_size += data_size;
  }

  // repeated bool bool = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_bool__size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_bool__size());
    total_size += data_size;
  }

  // repeated string string = 14;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.string_.size());
  for (int i = 0, n = _impl_.string_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.string_.Get(i));
  }

  // repeated bytes bytes = 15;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.bytes_.size());
  for (int i = 0, n = _impl_.bytes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.bytes_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Mas::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Mas::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Mas::GetClassData() const { return &_class_data_; }


void Mas::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Mas*>(&to_msg);
  auto& from = static_cast<const Mas&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Mas)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.double__.MergeFrom(from._impl_.double__);
  _this->_impl_.float__.MergeFrom(from._impl_.float__);
  _this->_impl_.int32_.MergeFrom(from._impl_.int32_);
  _this->_impl_.int64_.MergeFrom(from._impl_.int64_);
  _this->_impl_.uint32_.MergeFrom(from._impl_.uint32_);
  _this->_impl_.uint64_.MergeFrom(from._impl_.uint64_);
  _this->_impl_.sint32_.MergeFrom(from._impl_.sint32_);
  _this->_impl_.sint64_.MergeFrom(from._impl_.sint64_);
  _this->_impl_.fixed32_.MergeFrom(from._impl_.fixed32_);
  _this->_impl_.fixed64_.MergeFrom(from._impl_.fixed64_);
  _this->_impl_.sfixed32_.MergeFrom(from._impl_.sfixed32_);
  _this->_impl_.sfixed64_.MergeFrom(from._impl_.sfixed64_);
  _this->_impl_.bool__.MergeFrom(from._impl_.bool__);
  _this->_impl_.string_.MergeFrom(from._impl_.string_);
  _this->_impl_.bytes_.MergeFrom(from._impl_.bytes_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Mas::CopyFrom(const Mas& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mas::IsInitialized() const {
  return true;
}

void Mas::InternalSwap(Mas* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.double__.InternalSwap(&other->_impl_.double__);
  _impl_.float__.InternalSwap(&other->_impl_.float__);
  _impl_.int32_.InternalSwap(&other->_impl_.int32_);
  _impl_.int64_.InternalSwap(&other->_impl_.int64_);
  _impl_.uint32_.InternalSwap(&other->_impl_.uint32_);
  _impl_.uint64_.InternalSwap(&other->_impl_.uint64_);
  _impl_.sint32_.InternalSwap(&other->_impl_.sint32_);
  _impl_.sint64_.InternalSwap(&other->_impl_.sint64_);
  _impl_.fixed32_.InternalSwap(&other->_impl_.fixed32_);
  _impl_.fixed64_.InternalSwap(&other->_impl_.fixed64_);
  _impl_.sfixed32_.InternalSwap(&other->_impl_.sfixed32_);
  _impl_.sfixed64_.InternalSwap(&other->_impl_.sfixed64_);
  _impl_.bool__.InternalSwap(&other->_impl_.bool__);
  _impl_.string_.InternalSwap(&other->_impl_.string_);
  _impl_.bytes_.InternalSwap(&other->_impl_.bytes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Mas::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[1]);
}

// ===================================================================

class Enum::_Internal {
 public:
  using HasBits = decltype(std::declval<Enum>()._impl_._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Enum::Enum(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Enum)
}
Enum::Enum(const Enum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Enum* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:Enum)
}

inline void Enum::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_){1}
  };
}

Enum::~Enum() {
  // @@protoc_insertion_point(destructor:Enum)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Enum::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Enum::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Enum::Clear() {
// @@protoc_insertion_point(message_clear_start:Enum)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_ = 1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Enum::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .Enum.Status status = 1 [default = SECOND];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Enum_Status_IsValid(val))) {
            _internal_set_status(static_cast<::Enum_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Enum::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Enum)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .Enum.Status status = 1 [default = SECOND];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Enum)
  return target;
}

size_t Enum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Enum)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Enum.Status status = 1 [default = SECOND];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Enum::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Enum::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Enum::GetClassData() const { return &_class_data_; }


void Enum::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Enum*>(&to_msg);
  auto& from = static_cast<const Enum&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Enum)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Enum::CopyFrom(const Enum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Enum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Enum::IsInitialized() const {
  return true;
}

void Enum::InternalSwap(Enum* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Enum::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[2]);
}

// ===================================================================

class Father_Daughter::_Internal {
 public:
  using HasBits = decltype(std::declval<Father_Daughter>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

Father_Daughter::Father_Daughter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Father.Daughter)
}
Father_Daughter::Father_Daughter(const Father_Daughter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Father_Daughter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Father.Daughter)
}

inline void Father_Daughter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Father_Daughter::~Father_Daughter() {
  // @@protoc_insertion_point(destructor:Father.Daughter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Father_Daughter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void Father_Daughter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Father_Daughter::Clear() {
// @@protoc_insertion_point(message_clear_start:Father.Daughter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Father_Daughter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "Father.Daughter.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Father_Daughter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Father.Daughter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Father.Daughter.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Father.Daughter)
  return target;
}

size_t Father_Daughter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Father.Daughter)
  size_t total_size = 0;

  // required string name = 1;
  if (_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Father_Daughter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Father_Daughter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Father_Daughter::GetClassData() const { return &_class_data_; }


void Father_Daughter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Father_Daughter*>(&to_msg);
  auto& from = static_cast<const Father_Daughter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Father.Daughter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_name()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Father_Daughter::CopyFrom(const Father_Daughter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Father.Daughter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Father_Daughter::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void Father_Daughter::InternalSwap(Father_Daughter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Father_Daughter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[3]);
}

// ===================================================================

class Father::_Internal {
 public:
};

Father::Father(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Father)
}
Father::Father(const Father& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Father* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.daughter_){from._impl_.daughter_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Father)
}

inline void Father::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.daughter_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Father::~Father() {
  // @@protoc_insertion_point(destructor:Father)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Father::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.daughter_.~RepeatedPtrField();
}

void Father::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Father::Clear() {
// @@protoc_insertion_point(message_clear_start:Father)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.daughter_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Father::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Father.Daughter daughter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_daughter(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Father::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Father)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Father.Daughter daughter = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_daughter_size()); i < n; i++) {
    const auto& repfield = this->_internal_daughter(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Father)
  return target;
}

size_t Father::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Father)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Father.Daughter daughter = 1;
  total_size += 1UL * this->_internal_daughter_size();
  for (const auto& msg : this->_impl_.daughter_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Father::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Father::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Father::GetClassData() const { return &_class_data_; }


void Father::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Father*>(&to_msg);
  auto& from = static_cast<const Father&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Father)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.daughter_.MergeFrom(from._impl_.daughter_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Father::CopyFrom(const Father& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Father)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Father::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.daughter_))
    return false;
  return true;
}

void Father::InternalSwap(Father* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.daughter_.InternalSwap(&other->_impl_.daughter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Father::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Types*
Arena::CreateMaybeMessage< ::Types >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Types >(arena);
}
template<> PROTOBUF_NOINLINE ::Mas*
Arena::CreateMaybeMessage< ::Mas >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Mas >(arena);
}
template<> PROTOBUF_NOINLINE ::Enum*
Arena::CreateMaybeMessage< ::Enum >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Enum >(arena);
}
template<> PROTOBUF_NOINLINE ::Father_Daughter*
Arena::CreateMaybeMessage< ::Father_Daughter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Father_Daughter >(arena);
}
template<> PROTOBUF_NOINLINE ::Father*
Arena::CreateMaybeMessage< ::Father >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Father >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
